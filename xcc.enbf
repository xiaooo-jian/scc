
Function    =>  Stmt * 
Stmt        =>  ExprStmt ';' 
            |   ReturnStmt ';' 
            |    '{'  Stmt * '}'
            |   ';'
            |   DeclarStmt
            |   'for' '(' ExprStmt ';'ExprStmt ';' Stmt ')' stmts
            |   'if' '(' Expression ')' Stmt ('else' Stmt)? 
            |   'while' '(' Expression ')' Stmt
DeclarStmt  =>  'int' '*'? ident (',' ident)? ('=' expr)? ';'
ReturnStmt  =>  'return' Expression
ExprStmt    =>  Expression 
Expression  =>  EqualExpr ('=' Expression )?
EqualExpr   =>  CompareExpr (== !=) EqualExpr
CompareExpr =>  AddMinsExpr (> < >= <=) CompareExpr
AddMinsExpr =>  MulDivExpr (+ -) AddMinsExpr
MulDivExpr  =>  Unary  (* /) MulDivExpr
Unary       =>  (- + * &) Unary | Primary
Primary     =>  Num | '(' Expression ')' | ident
